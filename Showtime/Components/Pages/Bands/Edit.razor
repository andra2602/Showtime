@page "/bands/edit/{Id:guid}"
@using Showtime.Entities
@using Showtime.Enums
@using Showtime.Repositories.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@using Blazorise
@inject IRepositoryBand BandRepository
@inject NavigationManager Navigation

<h3>Edit Band</h3>

<style>
    body {
        background: url('/images/confetti.jpg') no-repeat center center fixed;
        background-size: cover;
        color: #e0e0e0;
        font-family: 'Montserrat', sans-serif;
    }

    h3 {
        font-family: 'Orbitron', sans-serif;
        font-size: 2.2rem;
        color: #fff;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 0 0 10px #FF00FF, 0 0 20px #FF00FF;
    }

    .grid-wrapper {
        max-width: 900px;
        margin: 0 auto;
        padding: 0 1rem;
        background-color: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0, 255, 255, 0.1);
        padding: 1.5rem;
        max-width: 600px;
        margin: 0 auto;
        font-family: 'Montserrat', sans-serif;
        font-style: italic;
        color: #ffffff;
    }




    Label {
        font-family: 'Orbitron', sans-serif;
        font-weight: 600;
        color: #ffffff;
        text-shadow: 0 0 5px #7a1fa2;
    }



    .b-field {
        margin-bottom: 1.5rem;
    }

    .b-input,
    .b-select {
        background-color: #1a1a1a;
        border: 1px solid #444;
        border-radius: 6px;
        color: white;
        padding: 0.5rem 1rem;
        font-family: 'Montserrat', sans-serif;
        font-size: 0.95rem;
        box-shadow: 0 0 5px rgba(255, 255, 255, 0.1);
        transition: all 0.3s ease;
    }

        .b-input::placeholder {
            color: #ccc;
            opacity: 0.7;
        }

        .b-input:focus,
        .b-select:focus {
            border-color: #00ffff;
            background-color: #1a1a1a;
            color: white;
            outline: none;
            box-shadow: 0 0 8px #00ffff;
        }


    .b-validation-message {
        color: #ff4c4c;
        font-size: 0.85rem;
        margin-top: 0.3rem;
    }

    .form-buttons {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 2rem;
    }

    .btn-save {
        background-color: #7a1fa2;
        color: white;
        font-weight: bold;
        padding: 0.6rem 1.2rem;
        border-radius: 6px;
        transition: all 0.3s ease;
        border: none;
    }

        .btn-save:hover {
            background-color: #5e00a3;
            box-shadow: 0 0 10px #7a1fa2;
            transform: scale(1.05);
        }

    .btn-cancel {
        background-color: #cc0044;
        color: #eee;
        font-weight: bold;
        padding: 0.6rem 1.2rem;
        border-radius: 6px;
        transition: all 0.3s ease;
        border: none;
    }

        .btn-cancel:hover {
            background-color: #cc0044;
            transform: scale(1.05);
        }
</style>


@if (originalBand == null) 
{
    <p><em>Loading...</em></p>
}
else
{   <div class="grid-wrapper">
    <EditForm Model="@bandToEdit" OnValidSubmit="HandleValidSubmit" OnFieldChanged="HandleFieldChanged">
        <DataAnnotationsValidator />

        <Field>
            <Label>Band Name</Label>
            <TextEdit @bind-Text="bandToEdit.Name" /> <ValidationMessage For="@(() => bandToEdit.Name)" />
        </Field>

        <Field>
            <Label>Genre</Label>
            <Select TValue="Genre" @bind-SelectedValue="bandToEdit.Genre">
                @foreach (var genre in Enum.GetValues(typeof(Genre)))
                {
                    <SelectItem Value="@genre">@genre</SelectItem>
                }
            </Select>
        </Field>

        <Field Class="form-buttons">
            <Button Class="btn-save" Type="ButtonType.Submit">Save</Button>
            <Button Class="btn-cancel" @onclick="Cancel">Cancel</Button>
        </Field>

    </EditForm>
    </div>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private Band? originalBand; 
    private Band? bandToEdit;

    protected override async Task OnInitializedAsync()
    {
        originalBand = await BandRepository.GetByIdAsync(Id);

        if (originalBand != null)
        {
            bandToEdit = new Band
                {
                    Id = originalBand.Id,
                    Name = originalBand.Name,
                    Genre = originalBand.Genre,
                };
        }
    }

    private async Task HandleValidSubmit()
    {
        if (bandToEdit == null || originalBand == null) return;

        originalBand.Name = bandToEdit.Name;
        originalBand.Genre = bandToEdit.Genre;

        BandRepository.Update(originalBand); 
        await BandRepository.SaveChangesAsync();
        Navigation.NavigateTo("/bands");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/bands");
    }
    private void HandleFieldChanged(FieldChangedEventArgs args)
    {
        Console.WriteLine($"Changed field: {args.FieldIdentifier.FieldName}");
    }
}
@page "/festivals/lineup/{Id:guid}"
@rendermode InteractiveServer
@using Showtime.Entities
@inject NavigationManager Navigation
@using Showtime.Context
@inject ShowTimeContext db
@using Microsoft.EntityFrameworkCore
@using System.Linq

<style>
    body {
        background: url('/images/laser.jpg') no-repeat center center fixed;
        background-size: cover;
        font-family: 'Montserrat', sans-serif;
        color: #e0e0e0;
    }

    h3 {
        font-family: 'Orbitron', sans-serif;
        font-size: 2.2rem;
        color: #ffffff;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 0 0 10px #FF00FF, 0 0 20px #FF00FF;
    }

    .drop-container-custom {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
        justify-content: center;
        padding: 1rem;
    }

    .b-card {
        background-color: rgba(30, 30, 30, 0.9) !important;
        border: 1px solid #7a1fa2;
        border-radius: 12px;
        box-shadow: 0 0 12px rgba(122, 31, 162, 0.3);
        transition: transform 0.2s ease;
        width: 240px;
        color: #f0f0f0 !important;
    }

        .b-card:hover {
            transform: scale(1.03);
            box-shadow: 0 0 18px rgba(122, 31, 162, 0.5);
        }

    .drop-zone-unplanned,
    .drop-zone-planned {
        background-color: rgba(20, 20, 20, 0.9);
        border: 2px dashed #7a1fa2;
        border-radius: 14px;
        padding: 1.5rem;
        min-height: 250px;
        flex: 1;
        transition: all 0.3s ease;
        box-shadow: 0 0 12px rgba(122, 31, 162, 0.2);
        color: #ffffff;
    }

        .drop-zone-unplanned:hover,
        .drop-zone-planned:hover {
            border-color: #be90ff;
            background-color: rgba(35, 35, 35, 0.95);
            transform: scale(1.01);
            box-shadow: 0 0 18px rgba(122, 31, 162, 0.5);
        }


    .btn-save,
    .btn-cancel {
        font-family: 'Montserrat', sans-serif;
        padding: 0.6rem 1.4rem;
        border-radius: 6px;
        border: none;
        font-weight: bold;
        transition: all 0.3s ease-in-out;
    }

    .btn-save {
        background-color: #7a1fa2;
        color: #fff;
        box-shadow: 0 0 8px rgba(122, 31, 162, 0.4);
    }

        .btn-save:hover {
            background-color: #5e00a3;
            box-shadow: 0 0 12px rgba(122, 31, 162, 0.7);
            transform: scale(1.05);
        }

    .btn-cancel {
        background-color: #444;
        color: #ddd;
        box-shadow: 0 0 6px rgba(255, 255, 255, 0.1);
    }

        .btn-cancel:hover {
            background-color: #333;
            color: white;
            transform: scale(1.05);
        }

    .alert-custom {
        margin-top: 1.5rem;
        font-weight: bold;
        background-color: rgba(30, 30, 30, 0.95);
        border-left: 4px solid #7a1fa2;
        color: #ddd;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(122, 31, 162, 0.3);
    }

    .heading-zone {
        font-family: 'Orbitron', sans-serif;
        color: #fff;
        font-size: 1.3rem;
        margin-bottom: 1rem;
        text-shadow: 0 0 6px #cc00cc;
    }
</style>


<h3>Change Lineup for @Festival?.Name</h3>

@if (Festival == null || Items == null)
{
    <p><em>Loading lineup data...</em></p>
}
else
{
    <DropContainer TItem="DropItem"
                   Items="@Items"
                   ItemsFilter="@( (item, zone) => item.Group == zone )"
                   ItemDropped="@ItemDropped"
                   ItemOrderChanged="@Reordered"
                   Flex="Flex.Wrap.Grow.Is1"
                   Class="my-4">

        <ChildContent>
            <DropZone TItem="DropItem" Name="Unplanned"
                      Class="drop-zone-unplanned"
                      Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1">
                <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom" Class="heading-zone">
                    Available Artists
                </Heading>
            </DropZone>

            <DropZone TItem="DropItem" Name="Planned"
                      Class="drop-zone-planned"
                      AllowReorder Reordered="@Reordered"
                      Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1">
                <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom" Class="heading-zone">
                    Festival Lineup
                </Heading>
            </DropZone>

        </ChildContent>

        <ItemTemplate>
            <Card Shadow="Shadow.Default" Margin="Margin.Is2.OnY">
                <CardBody>
                    <strong>@context.Name</strong>
                </CardBody>
            </Card>
        </ItemTemplate>
    </DropContainer>

    <div class="mt-4 d-flex justify-content-end">
        <Button Class="btn-save" Clicked="@SaveChanges">Save Changes</Button>
        <Button Class="btn-cancel ms-2" Clicked="@GoBack">Cancel</Button>

    </div>

    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <Alert Color="@StatusColor" Class="mt-3">@StatusMessage</Alert>
    }
}

@code {
    [Parameter] public Guid Id { get; set; }

    private Festival? Festival;
    private List<DropItem> Items = new();
    private string StatusMessage = "";
    private Color StatusColor = Color.Info;

    public class DropItem
    {
        public Guid BandId { get; set; }
        public string Name { get; set; } = "";
        public string Group { get; set; } = "Unplanned";
        public int Order { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFestivalData();
    }

    private async Task LoadFestivalData()
    {
        try
        {
            Festival = await db.Festivals!
                .Include(f => f.FestivalBands!)
                    .ThenInclude(fb => fb.Band)
                .FirstOrDefaultAsync(f => f.Id == Id);

            if (Festival == null)
            {
                Navigation.NavigateTo("/festivals");
                return;
            }

            var allBands = await db.Bands!.ToListAsync();
            var planned = Festival.FestivalBands ?? new List<FestivalBand>();
            var plannedBands = planned.Select(fb => new DropItem
                {
                    BandId = fb.BandId,
                    Name = fb.Band.Name,
                    Group = "Planned",
                    Order = fb.Order
                });

            var plannedIds = planned.Select(fb => fb.BandId).ToHashSet();
            var unplannedBands = allBands
                .Where(b => !plannedIds.Contains(b.Id))
                .Select(b => new DropItem
                    {
                        BandId = b.Id,
                        Name = b.Name,
                        Group = "Unplanned",
                        Order = 0
                    });

            Items = plannedBands.Concat(unplannedBands)
                                .OrderBy(i => i.Group == "Planned" ? i.Order : int.MaxValue)
                                .ThenBy(i => i.Name)
                                .ToList();
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error loading data: {ex.Message}";
            StatusColor = Color.Danger;
        }
    }

    private Task ItemDropped(DraggableDroppedEventArgs<DropItem> args)
    {
        var item = args.Item;
        item.Group = args.DropZoneName;

      
        if (item.Group == "Planned")
        {
            item.Order = Items.Where(i => i.Group == "Planned").Max(i => i.Order) + 1;
        }
        else
        {
            item.Order = 0;
        }

        StatusMessage = "Changes are pending. Don't forget to save!";
        StatusColor = Color.Warning;

        return Task.CompletedTask;
    }


    private Task Reordered(DropZoneOrder<DropItem> order)
    {
        if (order.DestinationDropZoneName != "Planned") return Task.CompletedTask;

        for (int i = 0; i < order.OrderedItems.Count; i++)
        {
            order.OrderedItems[i].Item.Order = i + 1;
        }

        StatusMessage = "Lineup reordered. Remember to save!";
        StatusColor = Color.Warning;

        return Task.CompletedTask;
    }


    private async Task SaveChanges()
    {
        try
        {
            var lineup = await db.FestivalBands!
                .Where(fb => fb.FestivalId == Festival!.Id)
                .ToListAsync();

            var planned = Items
                .Where(i => i.Group == "Planned")
                .Select((item, index) => new FestivalBand
                    {
                        FestivalId = Festival.Id,
                        BandId = item.BandId,
                        Order = index + 1
                    })
                .ToList();

            db.FestivalBands!.RemoveRange(lineup);
            await db.FestivalBands!.AddRangeAsync(planned);
            await db.SaveChangesAsync();

            StatusMessage = "Lineup saved successfully!";
            StatusColor = Color.Success;
            Navigation.NavigateTo($"/festivals/details/{Id}");
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error saving: {ex.Message}";
            StatusColor = Color.Danger;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/festivals/details/{Id}");
    }
}

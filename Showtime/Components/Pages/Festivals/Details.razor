@page "/festivals/details/{Id:guid}"
@using Showtime.Repositories.Interfaces
@using Showtime.Entities
@inject NavigationManager NavigationManager
@inject IRepositoryFestival FestivalRepository
@inject IRepositoryBand BandRepo

@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity

<h3>Festival Details</h3>
<style>
    body {
        background: url('/images/laser.jpg') no-repeat center center fixed;
        background-size: cover;
        color: #e0e0e0;
        font-family: 'Montserrat', sans-serif;
    }

    h3 {
        font-family: 'Orbitron', sans-serif;
        font-size: 2.2rem;
        color: #fff;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 0 0 10px #FF00FF, 0 0 20px #FF00FF;
    }


    .mb-3 {
        background-color: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0, 255, 255, 0.1);
        overflow: hidden;
        padding: 0.75rem;
        font-family: 'Montserrat', sans-serif;
        font-style: italic;
        color: #ffffff;
        max-width: 900px;
        margin: 0 auto 1rem auto;
    }

    .d-flex.justify-content-end {
        background-color: rgba(255, 255, 255, 0.05);
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }


    .b-card-title {
        font-family: 'Orbitron', sans-serif;
        font-size: 1.5rem;
        color: #ffffff;
        text-shadow: 0 0 8px #ffffffaa;
    }

    .b-card-body p {
        font-size: 1.1rem;
        color: #ffffff;
        font-style: italic;
    }

    .btn-back {
        background-color: #7a1fa2;
        color: #fff;
        font-weight: bold;
        padding: 0.5rem 1.2rem;
        border-radius: 6px;
        border: none;
        font-family: 'Orbitron', sans-serif;
        transition: all 0.3s ease;
    }

        .btn-back:hover {
            background-color: #5e00a3;
            color: #fff;
            box-shadow: 0 0 10px #7a1fa2;
            transform: scale(1.05);
            cursor: pointer;}

    .lineup-container {
        background-color: rgba(255, 255, 255, 0.05); /* ca restul cardurilor */
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        padding: 1.5rem;
        box-shadow: 0 0 15px rgba(122, 31, 162, 0.1);
        max-width: 600px;
        margin: 0 auto 2rem auto;
        font-family: 'Montserrat', sans-serif;
        font-style: italic;
        color: #ffffff;
    }


    .lineup-item {
        display: flex;
        justify-content: space-between;
        padding: 0.5rem 0;
        border-bottom: 1px dashed rgba(255, 255, 255, 0.15);
        font-size: 1.1rem;
        color: #e0e0e0;
    }


    .band-name {
        font-weight: bold;
        color: #ffffff;
        text-shadow: 0 0 5px #7a1fa2;
    }


    .band-genre {
        font-style: italic;
        color: #ff77ff;
        text-shadow: 0 0 5px #cc00ff55;
    }

    .lineup-button-wrapper {
        display: flex;
        justify-content: flex-end;
        margin: 0 1rem;
        margin-bottom: 2rem;
    }
</style>





@if (festival == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Blazorise.Card Class="mb-3">
        <CardHeader>
            <CardTitle>@festival.Name</CardTitle>
        </CardHeader>
        <CardBody>
            <p><strong>Location: </strong> @festival.Location</p>
            <p><strong>StartDate: </strong> @festival.StartDate?.ToString("yyyy-MM-dd") </p>
            <p><strong>EndDate: </strong>  @festival.EndDate?.ToString("yyyy-MM-dd") </p>
            <p><strong>Price: </strong> @festival.Price</p>
            <p><strong>Description: </strong> @festival.Description</p>
        </CardBody>
        <CardFooter Class="d-flex justify-content-end">
            <Button Class="btn-back" @onclick="GoBack">Back to list</Button>
        </CardFooter>
    </Blazorise.Card>

}


<h3>Festival LineUp</h3>
@if (festival?.FestivalBands != null && festival.FestivalBands.Any())
{
    <div class="lineup-container">
        @foreach (var fb in festival.FestivalBands.OrderBy(fb => fb.Order))
        {
            <div class="lineup-item">
                <span class="band-name">@fb.Band?.Name</span>
                <span class="band-genre">(@fb.Band?.Genre)</span>
            </div>
        }
    </div>
}
else
{
    <p class="text-muted">No lineup assigned yet.</p>
}
@if (isAdmin)
{

     <div class="lineup-button-wrapper">
    <Button Class="btn-back mb-3" @onclick="NavigateToChangeLineup">
        Change Lineup
    </Button></div>

}

@code {

    private bool isAdmin = false;

    [Parameter]
    public Guid Id { get; set; }

    private Festival? festival;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user != null)
        {
            isAdmin = await UserManager.IsInRoleAsync(user, "Admin");
        }

        festival = await FestivalRepository.GetByIdWithBandsAsync(Id);
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/festivals");
    }

    private void NavigateToChangeLineup()
    {
        NavigationManager.NavigateTo($"/festivals/lineup/{Id}");
    }


}

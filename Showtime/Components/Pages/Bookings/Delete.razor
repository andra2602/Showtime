@page "/bookings/delete/{Id:guid}"
@using Showtime.Entities
@using Showtime.Repositories.Interfaces
@inject IRepositoryBooking BookingRepo
@inject NavigationManager NavigationManager

<h3>Delete Booking</h3>

<style>
    h3 {
        font-family: 'Orbitron', sans-serif;
        color: #cc0044;
        text-align: center;
        margin-bottom: 2rem;
    }

    .card {
        max-width: 600px;
        margin: auto;
        border: 2px solid #cc0044;
        border-radius: 10px;
        padding: 1.5rem;
        background-color: #fff;
        box-shadow: 0 0 20px rgba(204, 0, 68, 0.3);
    }

    .btn-delete {
        background-color: #cc0044;
        color: white;
        font-weight: bold;
        border: none;
        padding: 0.5rem 1.2rem;
        border-radius: 6px;
        margin-right: 1rem;
        transition: all 0.3s ease;
    }

        .btn-delete:hover {
            background-color: #a00033;
            transform: scale(1.05);
        }

    .btn-cancel {
        background-color: #5e00a3;
        color: white;
        font-weight: bold;
        border: none;
        padding: 0.5rem 1.2rem;
        border-radius: 6px;
        transition: all 0.3s ease;
    }

        .btn-cancel:hover {
            background-color: #7a1fa2;
            transform: scale(1.05);
        }
</style>

@if (booking == null)
{
    <p><em>Loading booking info...</em></p>
}
else
{
    <div class="card">
        <h5>Are you sure you want to delete this booking?</h5>
        <p><strong>Festival:</strong> @booking.Festival?.Name</p>
        <p><strong>Date:</strong> @booking.Date.ToShortDateString()</p>
        <p><strong>Price:</strong> @booking.Price RON</p>

        <div class="d-flex justify-content-end mt-4">
            <button class="btn-delete" @onclick="DeleteBooking">Yes, Delete</button>
            <button class="btn-cancel" @onclick="Cancel">Cancel</button>
        </div>
    </div>
}

@code {
    [Parameter] public Guid Id { get; set; }

    private Booking? booking;

    protected override async Task OnInitializedAsync()
    {
        booking = await BookingRepo.GetByIdAsync(Id);
    }

    private async Task DeleteBooking()
    {
        if (booking is not null)
        {
            BookingRepo.Delete(booking);
            await BookingRepo.SaveChangesAsync();
            NavigationManager.NavigateTo("/bookings");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/bookings");
    }
}

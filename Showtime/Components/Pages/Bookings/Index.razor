@page "/bookings"
@rendermode InteractiveServer
@using Showtime.Entities
@using Showtime.Repositories.Interfaces
@using Showtime.Repositories.Implementation
@inject IRepositoryBooking BookingRepo
@using Blazorise.DataGrid
@using Blazorise
@using Blazorise.Icons.FontAwesome
@inject NavigationManager NavigationManager

@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity


<h3>My bookings</h3>

<style>
    body {
        background: url('/images/book.jpg') no-repeat center center fixed;
        background-size: cover;
        color: #e0e0e0;
        font-family: 'Montserrat', sans-serif;
    }

    h3 {
        font-family: 'Orbitron', sans-serif;
        font-size: 2.2rem;
        color: #fff;
        text-align: center;
        margin-bottom: 2rem;
        text-shadow: 0 0 10px #FF00FF, 0 0 20px #FF00FF;
    }

    .grid-wrapper {
        max-width: 900px;
        margin: 0 auto;
        padding: 0 1rem;
    }

    .b-datagrid {
        background-color: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0, 255, 255, 0.1);
        overflow: hidden;
    }

        .b-datagrid th,
        .b-datagrid td {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            border-right: 1px solid rgba(255, 255, 255, 0.1);
            background-color: rgba(255, 255, 255, 0.02);
            padding: 0.75rem;
            font-family: 'Montserrat', sans-serif;
            font-style: italic;
            color: #ffffff;
            font-size: 1rem;
        }

            .b-datagrid td:last-child,
            .b-datagrid th:last-child {
                border-right: none;
            }

        .b-datagrid th {
            font-weight: bold;
            text-transform: uppercase;
            font-size: 0.9rem;
            letter-spacing: 1px;
            color: #ffffff;
            background-color: rgba(255, 255, 255, 0.05);
        }

    .fab-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1000;
    }

    .fab-button {
        width: 60px;
        height: 60px;
        background-color: #7a1fa2;
        color: white;
        border: none;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 0 10px rgba(122, 31, 162, 0.6);
        transition: all 0.3s ease;
        font-size: 24px;
    }

        .fab-button:hover {
            transform: scale(1.1);
            background-color: #5e00a3;
            box-shadow: 0 0 20px rgba(122, 31, 162, 0.9);
            cursor: pointer;
        }

    .btn-delete {
        background-color: #cc0044;
        color: white;
        font-weight: bold;
        border: none;
        border-radius: 6px;
        padding: 0.5rem 1.2rem;
        transition: all 0.3s ease;
        box-shadow: 0 0 5px #cc0044;
        font-size: 0.85rem;
    }

        .btn-delete:hover {
            box-shadow: 0 0 10px rgba(255, 76, 76, 0.8);
            transform: scale(1.05);
            cursor: pointer;
        }

    .btn.btn-primary {
        background-color: #7a1fa2;
        border-color: #7a1fa2;
        color: white;
    }

        .btn.btn-primary:hover {
            background-color: #5e00a3;
            border-color: #5e00a3;
        }


</style>

@if (bookings == null)
{
    <p class ="text-center fs-5 mt-5">Loading bookings...</p>
}
else if (!bookings.Any())
{
    <p class="text-center fs-5 mt-5">You have no bookings yet.</p>
}
else
{
    <div class="grid-wrapper">
        <DataGrid TItem="Booking"
                  Data="@bookings"
                  ShowPager="true"
                  PageSize="5"
                  Responsive="true"
                  Striped="true"
                  Bordered="true"
                  Hoverable="true">

            <DataGridColumns>
                <DataGridColumn TItem="Booking" Caption="Festival">
                    <DisplayTemplate>
                        @context.Festival?.Name
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="Booking" Caption="Start Date">
                    <DisplayTemplate>
                        @context.StartDate.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="Booking" Caption="End Date">
                    <DisplayTemplate>
                        @context.EndDate.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="Booking" Caption="Price">
                    <DisplayTemplate>
                        @context.Price
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="Booking" Caption="Actions">
                    <DisplayTemplate>
                        <Button Color="Color.Danger"
                                Class="btn-delete"
                                Clicked="@(() => NavigateToDelete(context.Id))">
                            <i class="fas fa-trash me-1"></i> Delete
                        </Button>
                    </DisplayTemplate>
                </DataGridColumn>

            </DataGridColumns>
        </DataGrid>
    </div>
}

<div class="text-center mt-4">
    <button class="btn btn-primary" @onclick="NavigateToCreate">
        <i class="fas fa-plus"></i> Add New Booking
    </button>
</div>

@code {
    private List<Booking>? bookings;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user != null)
        {
            bookings = (await BookingRepo.GetBookingsByUserIdAsync(user.Id)).ToList();
        }
    }

    private async Task DeleteBooking(Guid bookingId)
    {
        var booking = await BookingRepo.GetByIdAsync(bookingId);
        if (booking != null)
        {
            BookingRepo.Delete(booking);
            await BookingRepo.SaveChangesAsync();

            bookings!.Remove(booking);
            StateHasChanged();
        }
    }

    private void NavigateToDelete(Guid id)
    {
        NavigationManager.NavigateTo($"/bookings/delete/{id}");
    }


    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/bookings/create");
    }
}

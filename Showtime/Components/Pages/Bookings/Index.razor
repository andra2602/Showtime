@page "/bookings"
@rendermode InteractiveServer
@using Showtime.Entities
@using Showtime.Repositories.Interfaces
@using Showtime.Repositories.Implementation
@inject IRepositoryBooking BookingRepo
@using Blazorise.DataGrid
@using Blazorise
@using Blazorise.Icons.FontAwesome
@inject NavigationManager NavigationManager

@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity


<h3>My bookings</h3>
@if (bookings == null)
{
    <p>Loading bookings...</p>
}
else if (!bookings.Any())
{
    <p>You have no bookings yet.</p>
}
else
{
    <table class="table table-striped table-bordered mt-4">
        <thead class="table-dark">
            <tr>
                <th>Festival</th>
                <th>Date</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in bookings)
            {
                <tr>
                    <td>@booking.Festival?.Name</td>
                    <td>@booking.Date.ToShortDateString()</td>
                    <td>@booking.Price</td>
                    <td>
                        <a class="btn btn-danger btn-sm" href="@($"/bookings/delete/{booking.Id}")">
                            <i class="fas fa-trash"></i> Delete
                        </a>

                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="text-center mt-4">
    <button class="btn btn-primary" @onclick="NavigateToCreate">
        <i class="fas fa-plus"></i> Add New Booking
    </button>
</div>

@code {
    private List<Booking>? bookings;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user != null)
        {
            bookings = (await BookingRepo.GetBookingsByUserIdAsync(user.Id)).ToList();
        }
    }

    private async Task DeleteBooking(Guid bookingId)
    {
        var booking = await BookingRepo.GetByIdAsync(bookingId);
        if (booking != null)
        {
            BookingRepo.Delete(booking);
            await BookingRepo.SaveChangesAsync();

            bookings!.Remove(booking);
            StateHasChanged();
        }
    }

    private void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/bookings/create");
    }
}

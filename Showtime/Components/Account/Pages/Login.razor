@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Showtime.Entities


@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<style>
    body {
        background: url('/images/start.jpg') no-repeat center center fixed;
        background-size: cover;
        font-family: 'Montserrat', sans-serif;
        color: #e0e0e0;
    }

    h1 {
        font-family: 'Orbitron', sans-serif;
        font-size: 2.4rem;
        text-align: center;
        margin-bottom: 2rem;
        color: #ffffff;
        text-shadow: 0 0 10px #FF00FF, 0 0 20px #FF00FF;
    }

    h2 {
        font-family: 'Orbitron', sans-serif;
        font-size: 1.3rem;
        color: #ffffff;
        margin-bottom: 1.5rem;
    }

    .form-container {
        background-color: rgba(255, 255, 255, 0.07);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        box-shadow: 0 0 18px rgba(122, 31, 162, 0.3);
        padding: 2rem;
        max-width: 500px;
        margin: 0 auto;
    }

    .form-floating > label {
        color: #aaa;
        font-weight: 500;
        font-family: 'Orbitron', sans-serif;
    }

    .form-control {
        background-color: #1a1a1a;
        color: #fff;
        border: 1px solid #444;
        border-radius: 6px;
        font-family: 'Montserrat', sans-serif;
        box-shadow: 0 0 6px rgba(255, 255, 255, 0.05);
        transition: all 0.3s ease;
    }

        .form-control:focus {
            background-color: #1a1a1a;
            color: #fff;
            border-color: #00ffff;
            box-shadow: 0 0 10px #00ffff;
        }

    .form-label {
        font-family: 'Orbitron', sans-serif;
    }

    .text-danger {
        color: #ff4c4c !important;
        font-size: 0.9rem;
        margin-top: 0.25rem;
    }

    .btn-primary {
        background-color: #7a1fa2;
        border: none;
        color: white;
        font-weight: bold;
        padding: 0.7rem;
        transition: all 0.3s ease;
        box-shadow: 0 0 8px rgba(122, 31, 162, 0.3);
    }

        .btn-primary:hover {
            background-color: #5e00a3;
            transform: scale(1.05);
            box-shadow: 0 0 12px rgba(122, 31, 162, 0.6);
        }

    .form-check-input {
        background-color: #222;
        border: 1px solid #888;
    }

        .form-check-input:checked {
            background-color: #7a1fa2;
            border-color: #7a1fa2;
            box-shadow: 0 0 6px rgba(122, 31, 162, 0.6);
        }

    a {
        color: #be90ff;
        text-decoration: underline;
    }

        a:hover {
            color: #ffffff;
            text-shadow: 0 0 8px #cc00cc;
        }

    hr {
        border-color: rgba(255, 255, 255, 0.1);
    }
</style>

<h1>Log in</h1>
<div class="row">
    <div class="col-md-4 form-container">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <Microsoft.AspNetCore.Components.Forms.ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [Inject]
    private IHttpContextAccessor HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
